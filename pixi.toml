[workspace]
name = "quapopt"
channels = ["conda-forge", "nvidia"]
platforms = ["linux-64"]
authors = ["Filip B. Maciejewski <fmaciejewski@usra.edu>"]
description = "Various tools for running quantum approximate optimization experiments and simulations."
#license = "ADD"
#license-file = "LICENSE.MD"
readme = "README.md"
repository = "https://github.com/usra-riacs/quantum-approximate-optimization/"

version = "0.2.1"


[feature.debug.dependencies]
python = "3.12.*"

[feature.debug.build-dependencies]
# Dependencies needed to build the project
cython = ">=3.1.2,<4"
setuptools = ">=80.9.0,<81"
numpy = ">=2.2.6,<3"

[feature.debug.pypi-dependencies]
mqlib = {editable = true, git = "https://github.com/fbm2718-usra/pymqlib-quapopt.git" }

[feature.debug.tasks]
# A task to compile the cpp code
build_cpp = "python setup.py build_ext --inplace"


[feature.quapopt.build-dependencies]
# Dependencies needed to build the project
cython = ">=3.1.2,<4"
setuptools = ">=80.9.0,<81"
wheel = "*"
numpy = ">=2.2.6,<3"




[feature.quapopt.dependencies]
python = "3.12.*"
cython = ">=3.1.2,<4"
jupyter = ">=1.1.1,<2"
notebook = ">=7.4.4,<8"
numpy = ">=2.2.6,<3"
pandas = ">=2.3.0,<3"
scipy = ">=1.16.0,<2"
pydantic = ">=2.11.7,<3"
tqdm = ">=4.67.1,<5"
networkit = ">=11.1,<12"
networkx = ">=3.5,<4"
rustworkx = ">=0.16.0,<0.17"
sympy = ">=1.14.0,<2"
qutip = ">=5.2.0,<6"
matplotlib = ">=3.10.3,<4"
pylatexenc = ">=2.10,<3"
plotly = ">=6.2.0,<7"
optuna = ">=3.6.1,<4"
python-dotenv = ">=1.1.1,<2"
nbstripout = ">=0.8.1,<0.9"
#Qiskit support
qiskit = ">=2.1.0,<3"
#qiskit-aer = ">=0.17.1,<0.18"
qiskit-ibm-runtime = ">=0.40.1,<0.41"
#This is needed for Jetbrains IDE support
pixi-pycharm = ">=0.0.8,<0.0.9"
pytest = ">=8.4.1,<9"
numba = ">=0.61.2,<0.62"




[feature.quapopt.pypi-dependencies]
kaleido = ">=1.0.0, <2"
#Custom version of mqlib, public repo
mqlib = {editable = true, git = "https://github.com/fbm2718-usra/pymqlib-quapopt.git", rev = "main" }



[feature.quapopt.tasks]
# A task to compile the cpp code
build_cpp = "python setup.py build_ext --inplace"
set_results_directory = "python scripts/set_results_directory.py"

[feature.mlvl.dependencies]
#This is needed for Mlvl submodules
pygad = ">=3.4.0,<4"
scikit-learn = ">=1.7.0,<2"
sortedcontainers = ">=2.4.0,<3"


[feature.gpu_support.system-requirements]
cuda = "12.9"

[feature.gpu_support.dependencies]
cuda = ">=12.9.1,<13"
cuda-toolkit = ">=12.9.1,<13"
cupy = ">=13.4.1,<14"
numba-cuda = ">=0.16.0,<0.17"



[feature.machine_learning.dependencies]
pytorch-gpu = ">=2.7.1,<3"

[feature.machine_learning_cpu.dependencies]
pytorch = ">=2.7.1,<3"

[feature.gpu_support.tasks]
check_cuda = "python scripts/check_cuda.py"



[feature.qiskit_qopt.pypi-dependencies]
python-sat = ">=1.8.dev17, <2"
qopt-best-practices = {editable = true, git = "https://github.com/qiskit-community/qopt-best-practices.git" }



[feature.qiskit_aer.pypi-dependencies]

[feature.qiskit_aer.dependencies]
qiskit-aer = ">=0.17.1,<0.18"

#this installs my local version of qiskit-aer built by hand
#TOOD(FBM): should upload built version to github
[feature.qiskit_aer_gpu_local.pypi-dependencies]
qiskit-aer = {path = "/home/fipeczek/python_packages/qiski_aer_versions/qiskit-aer_017_python312/dist/qiskit_aer-0.17.1-cp312-cp312-linux_x86_64.whl"}
nvidia-cuda-runtime-cu12 = "*"
nvidia-cublas-cu12 = "*"
nvidia-cusolver-cu12 = "*"
nvidia-cusparse-cu12 = "*"
cuquantum-cu12 = "*"

#This currently does not really install aer gpu because it doesn't work out-of-the-box
[feature.qiskit_aer_gpu.dependencies]
qiskit-aer = ">=0.17.1,<0.18"


[feature.pauli_backprop.pypi-dependencies]
qiskit-addon-obp = "*"
qiskit-addon-utils = ">=0.1.1, <0.2"

[feature.visualization.dependencies]
cmocean = "*"

[environments]
default = {features = [], solve-group="quapopt", no-default-feature = true}
#the base environment installs all default dependencies
#Creating this environment is workaround in pixi, the point is that it installs almost empty 'default' environment. This is so it's more convienent to work with different environment names in IDEs.
quapopt = {features = ['quapopt', 'qiskit_aer'], solve-group="quapopt", no-default-feature = true}
#gpu version also installs dependencies from feature "gpu_support"
quapopt-gpu = {features = ['quapopt', 'gpu_support', 'qiskit_aer_gpu'], solve-group="quapopt-gpu", no-default-feature = true}

#full versions that include some additional packages useful for working with advanced quantum optimization
quapopt-full = {features = ['quapopt', "machine_learning_cpu", 'qiskit_aer', 'mlvl', 'qiskit_qopt', 'pauli_backprop', 'visualization'], solve-group="quapopt",no-default-feature = true}
quapopt-gpu-full = {features = ['quapopt', 'gpu_support', 'machine_learning', 'qiskit_aer_gpu', 'mlvl', 'qiskit_qopt', 'pauli_backprop', 'visualization'], solve-group="quapopt-gpu",no-default-feature = true}

#this is my local version of quapopt that might use some locally-built packages
quapopt-gpu-full-fbm = {features = ['quapopt', 'gpu_support', 'machine_learning', 'qiskit_aer_gpu_local', 'mlvl', 'qiskit_qopt', 'pauli_backprop', 'visualization'], solve-group="quapopt-gpu-fbm",no-default-feature = true}

#Environments for debugging
debug = {features=['debug'], solve-group="debug",no-default-feature = true}